
pub mod web_client;
pub mod json_client;

pub use self::web_client::WebClient;
pub use self::json_client::JsonClient;

use std::collections::BTreeMap;
use serde::{Serialize, Deserialize, Serializer, Deserializer};
use serde_json;
use serde_json::Value;

///
///
#[derive(Serialize, Deserialize, Debug)]
pub struct SeriesData {
    pub title: String,
    pub provider_id: u64,
    pub search_title: String,
    pub current_count: u64,
    pub total_count: u64,
    pub media_type: String,
    pub media_type_options: BTreeMap<String, Value>,
}

///
///
///
#[derive(Serialize, Deserialize, Debug)]
pub struct ProviderData {
    pub id: u64,
    pub name:String,
    pub regex_find_count: String,
    pub base_provider: String,
    pub base_provider_options: BTreeMap<String, Value>,
}


///
///
///
#[derive(Serialize, Deserialize, Debug)]
pub struct BaseProviderData {
    pub name: String,
    pub id: u64,
}



///
///
///
pub trait Client { //FIXME: Provide better error handling with a descriptive enum

    ///
    ///
    ///
    fn get_series(&self) -> Result<Vec<SeriesData>, String>;

    ///
    ///
    ///
    fn get_providers(&self) -> Result<Vec<ProviderData>, String>;

    ///
    ///
    ///
    fn get_base_providers(&self) -> Result<Vec<BaseProviderData>, String>;
}


#[cfg(test)]
mod test {
    use super::*;
    use serde_json;
    use serde_json::Value;

    #[test]
    fn test_series_parse() {
        let s: SeriesData = serde_json::from_str(r#"
            {
                "title": "a",
                "search_title": "b",
                "provider_id": 1,
                "media_type": "c",
                "current_count": 2,
                "total_count": 3,
                "media_type_options": {}
            }
        "#).unwrap();

        assert_eq!("a", s.title);
        assert_eq!("b", s.search_title);
        assert_eq!("c", s.media_type);

        assert_eq!(1, s.provider_id);
        assert_eq!(2, s.current_count);
        assert_eq!(3, s.total_count);
    }

    #[test]
    fn test_provider_parse() {
        let p: ProviderData = serde_json::from_str(r#"
            {
                "name": "a",
                "id": 1,
                "base_provider": "b",
                "regex_find_count": "c",
                "base_provider_options": {}
            }
        "#).unwrap();

        assert_eq!("a", p.name);
        assert_eq!("b", p.base_provider);
        assert_eq!("c", p.regex_find_count);

        assert_eq!(1, p.id);
    }

    #[test]
    fn test_base_provider_parse() {
        let b: BaseProviderData = serde_json::from_str(r#"
            {
                "name": "a",
                "id": 1
            }
        "#).unwrap();

        assert_eq!("a", b.name);
        assert_eq!(1, b.id);
    }
}
